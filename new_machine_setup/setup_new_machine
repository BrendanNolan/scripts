#!/usr/bin/env bash

# Do not run with sudo - you will be prompted for sudo the first time it is needed and then it
# will remain valid for a few minutes while the rest of the installation proceeds

set -euo pipefail

bail() {
	echo "${1}"
	exit 1
}

if [[ "$(id -u)" -eq 0 ]]; then
	bail "Do not run this script as root"
fi

if [[ ! -e "${HOME}/.ssh/id_ed25519.pub" ]]; then
	bail "Setup up your ssh keys"
fi

os=""
case "$(uname -s)" in
Darwin)
	os=macos
	;;
Linux)
	if [[ -f /etc/os-release ]]; then
		os_release_file="/etc/os-release"
		grep -iqE "ubuntu|debian|arch" "${os_release_file}" || bail "Unrecognised linux distro"
		if grep -iqE "ubuntu|debian" "${os_release_file}"; then
			os=debianlike
		elif grep -iq "arch" "${os_release_file}"; then
			os=arch
		fi
	else
		bail "Unrecognised Linux distro"
	fi
	;;
*)
	bail "Unrecognised OS"
	;;
esac

if [[ -z "${os+x}" ]]; then
	bail "Unrecognised OS"
fi
if [[ "${os}" == debianlike ]]; then
	sudo apt-get update
fi
if [[ "${os}" == macos ]]; then
	brew_install_script=$(mktemp)
	if curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh >"${brew_install_script}"; then
		/bin/sh "${brew_install_script}"
	else
		bail "Failed to install homebrew"
	fi
	unset brew_install_script
fi

install() {
	local is_gui=false
	while [[ $# -gt 0 ]]; do
		case "$1" in
		--gui)
			is_gui=true
			shift
			;;
		--) # end of options
			shift
			break # break out of while loop
			;;
		*)     # anything else, stop processing
			break # break out of while loop
			;;
		esac
	done
	[[ $# == 1 ]] || bail "Usage: install [--gui] package_name"
	local package="${1}"
	case "${os}" in
	macos)
		if "${is_gui}"; then
			brew install --cask "${package}"
		else
			brew install "${package}"
		fi
		;;
	debianlike)
		sudo apt-get install -y "${package}"
		;;
	arch)
		sudo pacman -Syu --noconfirm "${package}"
		;;
	esac
}

install git
rm -f "${HOME}/.bashrc"
rm -f "${HOME}/.zshrc"
rm -f "${HOME}/.config"
mkdir -p "${HOME}/dev" || exit 1
git clone git@github.com:BrendanNolan/dotfiles.git "${HOME}/dev/dotfiles"
git clone git@github.com:BrendanNolan/scripts.git "${HOME}/dev/scripts"
"${HOME}/dev/scripts/reload_dotfiles"

install --gui chrome
install bash
install bat
install broot
install cloc
install eza
install fd
install fish
install flamegraph
install fontconfig
install fzf
install gitleaks
install grep
install ncdu
install neovim
install node
install pandoc
install parallel
install ripgrep
install sd
install shellcheck
install shfmt
install sponge
install stow
install tldr
install tmux
install unzip
install watch
install yazi
install zip
install zoxide
install zsh

npm install jquery

install_for_macos() {
	brew tap 'dlvhdr/formulae'
	brew tap 'felixkratz/formulae'
	brew tap 'homebrew-zathura/zathura'
	brew tap 'homebrew/cask-fonts'
	brew tap 'nikitabobko/tap'
	install 'dlvhdr/formulae/diffnav'
	install 'felixkratz/formulae/borders'
	install 'homebrew-zathura/zathura/zathura'
	install 'homebrew-zathura/zathura/zathura-pdf-poppler'
	install gh # Installing on linux is not straightforward and is best done manually
	install gnu-sed
	install --gui aerospace
	install --gui font-fira-code
	install --gui mactex
	install --gui wezterm
}

install_for_arch() {
	install nerd-fonts-fira-code
	install github-cli
	install base-devel
	install --gui wezterm
}

install_for_debian_like() {
	install build-essential
	# Download the latest FiraCode Nerd Font release
	pushd /tmp || return 1
	wget https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip
	unzip FiraCode.zip -d "${HOME}/local/share/fonts"
	# Refresh font cache
	fc-cache -fv
	popd || return 1
}

case "${os}" in
macos)
	install_for_macos
	;;
debianlike)
	install_for_debian_like
	echo "You may want to manually install the github CLI using the instructions found here:"
	echo "https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian"
	echo
	echo "You may also want to look into installing wezterm manually"
	;;
arch)
	install_for_arch
	;;
esac

install_rust_toolchain_and_cargo_binstall() {
	local rustup_install_script
	rustup_install_script=$(mktemp)
	if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs >"${rustup_install_script}"; then
		sh "${rustup_install_script}" -y || bail "Failed to install rustup"
	else
		bail "Failed to install rustup"
	fi
	local cargo_binstall_install_script
	cargo_binstall_install_script=$(mktemp)
	if curl -L --proto '=https' --tlsv1.2 -sSf \
		https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh \
		>"${cargo_binstall_install_script}"; then
		bash "${cargo_binstall_install_script}" || bail "Failed to install cargo-binstall"
	else
		bail "Failed to install cargo-binstall"
	fi
}

install_rust_toolchain_and_cargo_binstall
cargo install cargo-shuttle
cargo install cargo-update
cargo install sccache
cargo install tokio-console
cargo install tree-sitter-cli
cargo install starship
