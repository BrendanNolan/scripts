#!/usr/bin/env bash

# Do not run with sudo - you will be prompted for sudo the first time it is needed and then it
# will remain valid for a few minutes while the rest of the installation proceeds

set -euo pipefail

bail() {
	echo "${1}"
	exit 1
}

if [ "$(id -u)" -eq 0 ]; then
	bail "Do not run this script as root"
fi

setup_ssh() {
	if [[ ! -e "${HOME}/.ssh/id_ed25519.pub" ]]; then
		email_address=''
		while [[ -z "${email_address}" ]]; do
			echo "Please enter your email for your new ssh key:"
			read -r email_address </dev/tty # /dev/tty prevents confusion of stdin when the script is curled into bash
		done
		ssh-keygen -t ed25519 -C "${email_address}"
	fi
	echo "Add this key to github now; press any key to continue when you are done"
	cat "${HOME}/.ssh/id_ed25519.pub"
	read -n 1 -s -r </dev/tty # /dev/tty prevents confusion of stdin when the script is curled into bash
	echo
	while ! ssh -o StrictHostKeyChecking=no -T git@github.com 2>/dev/null; do
		echo "Waiting for SSH key to propagate..."
		sleep 5
	done
	echo "SSH key is now working!"
}
setup_ssh

os=""
case "$(uname -s)" in
Darwin)
	os=macos
	;;
Linux)
	if [[ -f /etc/os-release ]]; then
		os_release_file="/etc/os-release"
		if grep -iq '^ID=fedora$' "${os_release_file}"; then
			os=fedora
		elif grep -iEq '^ID=(ubuntu|debian)$' "${os_release_file}"; then
			os=debianlike
		fi
	else
		bail "Unrecognised Linux distro"
	fi
	;;
*)
	bail "Unrecognised OS"
	;;
esac

if [[ -z "${os+x}" ]]; then
	bail "Unrecognised OS"
fi
if [[ "${os}" == macos ]]; then
	brew_install_script=$(mktemp)
	if curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh >"${brew_install_script}"; then
		/bin/sh "${brew_install_script}"
	else
		bail "Failed to install homebrew"
	fi
	unset brew_install_script
fi

update_package_manager() {
	case "${os}" in
	macos)
		brew update
		brew upgrade
		brew clean
		;;
	fedora)
		sudo dnf makecache -y
		;;
	debianlike)
		sudo apt-get update
		sudo apt-get install -y snapd
		sudo systemctl enable --now snapd # Enable and start the snapd daemon
		;;
	esac
}
update_package_manager

install() {
	local is_gui=false
	while [[ $# -gt 0 ]]; do
		case "$1" in
		--gui)
			is_gui=true
			shift
			;;
		--) # end of options
			shift
			break # break out of while loop
			;;
		*)     # anything else, stop processing
			break # break out of while loop
			;;
		esac
	done
	[[ $# == 1 ]] || bail "Usage: install [--gui] package_name"
	local package="${1}"
	case "${os}" in
	macos)
		if [[ "${is_gui}" == true ]]; then
			brew install --cask "${package}"
		else
			brew install "${package}"
		fi
		;;
	fedora)
		sudo dnf install -y "${package}"
		;;
	debianlike)
		if apt search "${package}" >/dev/null 2>&1; then
			sudo apt-get install -y "${package}"
		else
			if snap find "${package}" | grep -q "^${package} "; then
				sudo snap install "${package}"
			else
				bail "Error: ${package} not available in apt or snap"
			fi
		fi
		;;
	esac
}

install cloc
install fish
install fontconfig
install fzf
install git
install go
install grep
install moreutils
install ncdu
install pandoc
install parallel
install ripgrep
install shellcheck
install stow
install tmux
install unzip
install zip
install zsh

rm -f "${HOME}/.bashrc"
rm -f "${HOME}/.bash_profile"
rm -f "${HOME}/.zshrc"
rm -f "${HOME}/.config"
mkdir -p "${HOME}/dev" || exit 1
rm -rf "${HOME}/dev/dotfiles"
git clone git@github.com:BrendanNolan/dotfiles.git "${HOME}/dev/dotfiles"
rm -rf "${HOME}/dev/scripts"
git clone git@github.com:BrendanNolan/scripts.git "${HOME}/dev/scripts"
source "${HOME}/.bash_profile"
reload_dotfiles

install_for_macos() {
	brew tap 'dlvhdr/formulae'
	brew tap 'felixkratz/formulae'
	brew tap 'homebrew-zathura/zathura'
	brew tap 'homebrew/cask-fonts'
	brew tap 'nikitabobko/tap'
	install bash
	install 'dlvhdr/formulae/diffnav'
	install 'felixkratz/formulae/borders'
	install gh
	install gnu-sed
	install 'homebrew-zathura/zathura/zathura'
	install 'homebrew-zathura/zathura/zathura-pdf-poppler'
	install node
	install npm
	install shfmt
	install watch
	install --gui aerospace
	install --gui font-fira-code
	install --gui mactex
	install --gui wezterm
}

install_for_fedora() {
	install '@c-development'
	install '@development-tools'

	# github cli
	sudo dnf install -y dnf5-plugins
	sudo dnf config-manager addrepo --overwrite --from-repofile=https://cli.github.com/packages/rpm/gh-cli.repo
	sudo dnf install -y gh --repo gh-cli

	install fira-code-fonts
	install nodejs
	install procps-ng
	install shfmt
	install util-linux
}

install_for_debianlike() {
	install build-essential
	install fonts-firacode
	install gh
	install nodejs
	install npm
	install procps
	install shfmt
	install util-linux
}

case "${os}" in
macos)
	install_for_macos
	;;
fedora)
	install_for_fedora
	;;
debianlike)
	install_for_debianlike
	;;
esac

npm install jquery
npm install tldr

# Unsetting RUSTC_WRAPPER just while we do the initial cargo installs
unset RUSTC_WRAPPER
install_rust_toolchain_and_sccache_and_cargo_binstall() {
	local rustup_install_script
	rustup_install_script=$(mktemp)
	if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs >"${rustup_install_script}"; then
		sh "${rustup_install_script}" -y || bail "Failed to install rustup"
	else
		bail "Failed to install rustup"
	fi
	# Installing sccache here because cargo-binstall needs it
	cargo install sccache
	local cargo_binstall_install_script
	cargo_binstall_install_script=$(mktemp)
	if curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh >"${cargo_binstall_install_script}"; then
		bash "${cargo_binstall_install_script}" || bail "Failed to install cargo-binstall"
	else
		bail "Failed to install cargo-binstall"
	fi
}
install_rust_toolchain_and_sccache_and_cargo_binstall
cargo install bat
cargo install broot
cargo install cargo-shuttle
cargo install cargo-update
cargo install eza
cargo install fd-find
cargo install flamegraph
cargo install sd
cargo install starship
cargo install tokio-console
cargo install tree-sitter-cli
cargo install --force yazi-build
cargo install zoxide

# Set up env again, just in case this script was run via source (though it shouldn't be)
source "${HOME}/.bash_profile"

install_neovim() {
	sudo apt-get install -y ninja-build gettext cmake unzip curl build-essential git
	git clone https://github.com/neovim/neovim.git
	pushd neovim
	git checkout stable
	make CMAKE_BUILD_TYPE=Release
	make CMAKE_INSTALL_PREFIX="${TOOLS_HOME}" install
	popd
	rm -rf neovim
}
install_neovim

install_gitleaks() {
	if ! which go; then
		bail "Cannot build gitleaks without go"
	fi
	git clone https://github.com/gitleaks/gitleaks.git
	pushd gitleaks
	make build
	popd
	rm -rf gitleaks
}
install_gitleaks

case "${os}" in
macos) ;;
fedora)
	echo "You may want to try to install wezterm manually now"
	;;
debianlike)
	echo "You may want to try to install wezterm manually now"
	;;
esac
